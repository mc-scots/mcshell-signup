#!/bin/bash
# This is a simple daemon which processes signup and password reset requests.
# Copyright (C) 2018 Robert Lowe <robert.lowe@maryvillecollege.edu>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

function user-exists {
    id $1 > /dev/null 2>&1
}

function validate-user {
    echo $1 | grep ".*@.*maryvillecollege\\.edu" > /dev/null 2>&1
}

function extract-user {
    echo $1 | sed -e 's/@.*$//'
}

# commands are expected in the form: namedSocket:COMMAND:EMAIL:ARG1:ARG2
# Where ARG1 and ARG2 are optional and based on the command
function proc-command {
    socket=$(echo $1 | cut -d: -f1)
    cmd=$(echo $1 | cut -d: -f2)
    email=$(echo $1 | cut -d: -f3)
    arg1=$(echo $1 | cut -d: -f4)
    arg2=$(echo $1 | cut -d: -f5)

    #run the command
    case $cmd in
	"REQUEST")
	    cmd-request $email > $socket
	    ;;
	"PASSWD")
	    cmd-passwd $email $arg1 $arg2 > $socket
	    ;;
	*)
	    cmd-invalid > $socket
	    ;;
    esac
}

# Request a password reset/create account
function cmd-request {
    if validate-user $1; then
	uuid=$(uuidgen)
	echo "SUCCESS:$uuid"
	echo $1 > /tmp/mc-signup/$uuid
    else
	echo "ERROR:Registration is only open to Maryville College Students, Staff, and Faculty"
    fi
}

# Send a password reset.  This completes the request
function cmd-passwd {
    if [ -e /tmp/mc-signup/$2 ]
    then
	token_email=$(cat /tmp/mc-signup/$2)
	if [ "$1" == "$token_email" ]
	then
	    user=$(extract-user $1)
	    
	    #create the user if needed
	    if ! user-exists $user; then
		sudo useradd -m $user
		if [ $? -ne 0 ]; then
		    echo "ERROR:Failed to create user"
		fi
	    fi

	    #change the password
	    echo "$user:$3" | sudo chpasswd 
	    if [ $? -eq 0 ]; then
		echo "SUCCESS"
	    else
		echo "ERROR:Failed to update password"
	    fi
	    
	    rm /tmp/mc-signup/$2
	else
	    echo "ERROR:Security token did not match."
	fi
    else
	echo "ERROR:Security token is invalid or expired."
    fi
}


# Invalid Command
function cmd-invalid {
    echo "ERROR:Invalid or malformed command." 
}

# there can be only one!
killall mc-signup 2> /dev/null
rm -rf /tmp/mc-signup /tmp/mc-signup-pipe

# create the directory we keep all of our info in
mkdir /tmp/mc-signup
mkfifo /tmp/mc-signup-pipe
chmod 700 /tmp/mc-signup
chmod a+rw /tmp/mc-signup-pipe


# The daemon loop
while (( 1 ))
do
    #Read the command and run it (easy, huh?)
    read cmd < /tmp/mc-signup-pipe
    proc-command $cmd
done

